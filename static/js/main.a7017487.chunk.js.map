{"version":3,"sources":["components/GameCards/Card.js","components/Wrapper/Wrapper.js","components/Header/Header.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","height","width","alt","id","src","image","onClick","checkIfClicked","Wrapper","children","Header","currentScore","topScore","Footer","class","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","characters","bind","assertThisInitialized","clickedCharacter","filter","char","characterCopy","slice","sort","b","Math","random","clicked","resetCharacterCopy","map","setState","findIndex","_this2","components_Header_Header","components_Wrapper_Wrapper","GameCards_Card","key","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7017487.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n// set properties for the image and the onClick event to see if the card has been clicked or not already\nconst Card = props => (\n  <div className=\"card\">\n    <div className=\"img-container\">\n      <img\n        height=\"250px\"\n        width=\"200px\"\n        alt={\"This is \" + props.id}\n        src={props.image}\n        onClick={() => props.checkIfClicked(props.id)}\n      />\n    </div>\n  </div>\n);\n\nexport default Card;\n","import React from \"react\";\nimport \"./wrapper.css\";\n\n// set properties for the wrapper around the images and return everything (props.children)\nconst Wrapper = props => (\n  <div className=\"container wrapper\">{props.children}</div>\n);\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Header.css\";\n\n// create a header with a Bootstrap navbar and jumbotron\nconst Header = props => (\n  <div className=\"main-container-fluid\">\n    <nav className=\"navbar sticky-top navbar-light bg-light justify-content-end\">\n      <h5 className=\"score\">\n        Current game score: {props.currentScore} | Top score: {props.topScore}\n      </h5>\n    </nav>\n\n    <div className=\"jumbotron jumbotron-fluid\">\n      <h1>GOT Memory Game</h1>\n    </div>\n  </div>\n);\n\nexport default Header;\n","import React from \"react\";\nimport \"./Footer.css\";\n\n// set the footer to a copyright string\nconst Footer = props => (\n  <div className=\"footer\">\n    <p class=\"text-muted text-center\">React Memory Game</p>\n  </div>\n);\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport Card from \"./components/GameCards\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n\nimport characters from \"./characters.json\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      characters: characters,\n      topScore: 0,\n      currentScore: 0\n    };\n    this.checkIfClicked = this.checkIfClicked.bind(this);\n  }\n\n  checkIfClicked(id) {\n    let clickedCharacter = this.state.characters.filter(\n      char => char.id === id\n    )[0];\n    let characterCopy = this.state.characters.slice().sort(function(a, b) {\n      return 0.5 - Math.random();\n    });\n\n    if (!clickedCharacter.clicked) {\n      clickedCharacter.clicked = true;\n      characterCopy[\n        characterCopy.findIndex(char => char.id === id)\n      ] = clickedCharacter;\n\n      this.setState({\n        characters: characterCopy,\n        currentScore: this.state.currentScore + 1,\n        topScore:\n          this.state.currentScore + 1 > this.state.topScore\n            ? this.state.currentScore + 1\n            : this.state.topScore\n      });\n    } else {\n      let resetCharacterCopy = characterCopy.map(char => {\n        return {\n          id: char.id,\n          image: char.image,\n          clicked: false\n        };\n      });\n      this.setState({\n        characters: resetCharacterCopy,\n        currentScore: 0\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header\n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n        />\n        <Wrapper>\n          {this.state.characters.map(characters => (\n            <Card\n              checkIfClicked={this.checkIfClicked}\n              id={characters.id}\n              key={characters.id}\n              image={characters.image}\n            />\n          ))}\n        </Wrapper>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}